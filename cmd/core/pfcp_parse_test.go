package core

import (
	"testing"

	"encoding/hex"

	"github.com/wmnsk/go-pfcp/message"
)

func TestParsePfcpMessage(t *testing.T) {
	type args struct {
		hexMessage string
	}
	tests := []struct {
		name    string
		args    args
		wantErr bool
	}{
		{
			name: "huaweiSxbSessionEstablishmentRequest",
			args: args{
				hexMessage: "213202cb000000000000000000007300003c0005000aa9708c0039000d020000000000ec00050aa9708c0001006a003800020005001d0004ffffffff000200190014000100001500090100ec00050aa97083805f000307db03006c0004000000050051000400006106005100040000c146006d000400000004804b000307db018012000607db00ef80018019000307db008ca9000307db010001006c003800020004001d0004ffffffff0002001b00140001010016000908696e7465726e6574005d00050664430003006c0004000000040051000400006106005100040000c146006d000400000004804b000307db018012000607db00ef80018019000307db008ca9000307db0100030032006c000400000004002c00010200040018002a0001000054000900009c012f0aa974b0001e000200008014000507db01000000030025006c000400000005002c0001020004000b002a000101001e000200008014000507db0100000006002b0051000400006106003e000103002500020800004700040001518084d0000507db020105804b000307db0100060063005100040000c146003e000103002500020600001f0009010000000000005000002000040000003c00470004ffffffff002400040000753084d0000507db020103804b000307db0184d4000607db000000008509000307db2884dd000607db0000000000070030006d0004000000040019000100001a000a00004189370000129da0800d000307db4c8011000307db098016000307db0000710001018027000307db018001000a07db52000200000010f68002000807db9712119179f68003000a07db53610185582468518004000307db068006000407db02178009000f07db1852f055799052f02500015900800a000507db52f055800b000407db08008017000307db02801b000307db028088000707db020aa974949c42000b07db00000001040aa974949c43000b07db00000001040aa97082",
			},
			wantErr: false,
		},
		{
			name: "huaweiSxbHeartbeatRequest",
			args: args{
				hexMessage: "200100110003c40000600004e9f01682003500011a",
			},
			wantErr: false,
		},
		{
			name: "huaweiSxaSessionEstablishmentRequest",
			args: args{
				hexMessage: "2132017c000000000000000000390b00003c0005000aa9749a0039000d0200000000009c012f0aa9749a00010049003800020005001d0004ffffffff0002001900140001000015000901009c012f0aa97490805f000307db01006c000400000005006d000400000004804b000307db018ca9000307db010001004f003800020004001d0004ffffffff0002001f00140001010015000901009c012f0aa974b00016000908696e7465726e6574006c000400000004006d000400000004804b000307db018ca9000307db010003001c006c000400000005002c0001020004000b002a000101001e0002000000030021006c000400000004002c0001040004000b002a000100001e0002000000580001010007001b006d0004000000040019000100800d000307db4c8011000307db0900550005005800010100710001018027000307db018001000a07db52000200000010f68002000807db9712119179f68003000a07db53610185582468518004000307db068017000307db02801b000307db00",
			},
			wantErr: false,
		},
		{
			name: "huaweiSxaSessionModificationRequest",
			args: args{
				hexMessage: "2134012a0000000001d400e400390c000006002b0051000400006106003e000103002500020800004700040001518084d0000507db020105804b000307db010009002600380002000400510004000061068012000607db00ef80018019000307db008ca9000307db010009002600380002000500510004000061068012000607db00ef80018019000307db008ca9000307db01000a002d006c000400000005002c000102000b0013005400090000ec00050aa97083001e000200008014000507db010000000a001b006c000400000004000b0006001e000200008014000507db010000000e001b006d0004000000040019000100800d000307db4c8011000307db0900710001018007000707db02644300038009000f07db1852f055799052f02500015900800a000507db52f055",
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			bytebuffer, err := hex.DecodeString(tt.args.hexMessage)

			if err != nil {
				t.Errorf("TestParsePfcpMessage error: %v, unable to convert hex to byte", err)
			}

			if pfcpMessage, err := message.Parse(bytebuffer); (err != nil) != tt.wantErr {
				t.Errorf("TestParsePfcpMessage error: %v, expected error: %v", err, tt.wantErr)
			} else if err == nil {
				switch pfcpMessage.MessageType() {
				case message.MsgTypeSessionEstablishmentRequest:
					req := pfcpMessage.(*message.SessionEstablishmentRequest)
					t.Log(printSessionEstablishmentRequest(req))
				case message.MsgTypeHeartbeatRequest:
					req := pfcpMessage.(*message.HeartbeatRequest)
					t.Log(printHeartbeatRequest(req))
				case message.MsgTypeSessionModificationRequest:
					req := pfcpMessage.(*message.SessionModificationRequest)
					t.Log(printSessionModificationRequest(req))
				default:
					t.Errorf("TestParsePfcpMessage error: unexpected message: %v", pfcpMessage.MessageTypeName())
				}
			}
		})
	}
}
